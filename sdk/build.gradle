/*
 * Copyright (C) 2017 nyris GmbH
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *    http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
apply plugin: 'com.android.library'
apply plugin: 'maven'

def getVersionName = { ->
    try {
        def stdout = new ByteArrayOutputStream()
        exec {
            workingDir '../'
            commandLine System.getenv("GITVERSION_PATH")+'gitversion.exe', '/showvariable', 'SemVer'
            standardOutput = stdout
        }
        return stdout.toString().trim()
    }
    catch (ignored) {
        return null;
    }
}

def getLastCommitHash = { ->
    try {
        def stdout = new ByteArrayOutputStream()
        exec {
            commandLine 'git', 'rev-parse', '--short', 'HEAD'
            standardOutput = stdout
        }
        return "\""+stdout.toString().trim()+"\""
    }
    catch (ignored) {
        return "";
    }
}

def getMajorMinorPatch = { ->
    try {
        def stdout = new ByteArrayOutputStream()
        exec {
            workingDir '../'
            commandLine System.getenv("GITVERSION_PATH")+'gitversion.exe', '/showvariable', 'MajorMinorPatch'
            standardOutput = stdout
        }
        return "\""+stdout.toString().trim()+"\""
    }
    catch (ignored) {
        return null;
    }
}

android {
    compileSdkVersion rootProject.ext.compileSdkVersion
    buildToolsVersion rootProject.ext.buildToolsVersion

    defaultConfig {
        minSdkVersion rootProject.ext.minSdkVersion
        targetSdkVersion rootProject.ext.targetSdkVersion
        versionName getVersionName()
    }

    sourceSets {
        main.java.srcDirs += 'src/main/java/activities'
        main.java.srcDirs += 'src/main/java/interfaces'
        main.java.srcDirs += 'src/main/java/callbacks'
        main.java.srcDirs += 'src/main/java/exceptions'
        main.java.srcDirs += 'src/main/java/analytics'
        main.java.srcDirs += 'src/main/java/helpers'
        main.java.srcDirs += 'src/main/java/models'
        main.java.srcDirs += 'src/main/java/networking'
        main.java.srcDirs += 'src/main/java/networking/endpoints'
        main.java.srcDirs += 'src/main/java/networking/tasks'
        main.java.srcDirs += 'src/main/java/networking/tasks/auth'
        main.java.srcDirs += 'src/main/java/networking/tasks/imagematching'
    }

    buildTypes {
        debug {
            buildConfigField "String", "LAST_COMMIT_HASH", getLastCommitHash()
            buildConfigField "String", "MAJOR_MINOR_PATCH", getMajorMinorPatch()
        }

        release {
            //minifyEnabled true
            buildConfigField "String", "LAST_COMMIT_HASH", getLastCommitHash()
            buildConfigField "String", "MAJOR_MINOR_PATCH", getMajorMinorPatch()
        }
    }
}

uploadArchives {
    repositories {
        mavenDeployer {
            pom.version = getVersionName()
            pom.groupId = 'de.nyris'
            pom.artifactId = 'imx'
            if (!getVersionName().contains("-unstable")){
                repository(url: "https://www.myget.org/F/nyris/maven/"){
                    authentication(userName: System.getenv("MYGET_USER"), password: System.getenv("MYGET_PASSWORD"))
                }
            }
        }
    }
}

dependencies {
    compile fileTree(include: ['*.jar'], dir: 'libs')
    compile "com.android.support:support-annotations:$supportLibraryVersion"
    compile 'com.squareup.okhttp3:okhttp:3.9.1'
    compile 'com.google.code.gson:gson:2.8.2'
    compileOnly 'com.facebook.stetho:stetho-okhttp3:1.5.0'
}
